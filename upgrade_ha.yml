---
# upgrade_ha.yml - PAN-OS HA pair upgrade playbook.
#
# Description
# ===========
#
# Upgrades a PAN-OS HA pair to the specified version.  Upgrade must be a single step (i.e. 8.1.7 to 8.1.12).  For major
# version upgrades requiring a base image to be downloaded to the device prior to performing the upgrade, see the 
# 'download_panos_image.yml' playbook.
#
# This playbook requires connection details for the primary device to be specified in the variables
# 'primary_ip_address', 'primary_username', and 'primary_password'.  Connection details for the secondary device
# should be specified in the variables 'secondary_ip_address', 'secondary_username', 'secondary_password'.
# These may be defined as host variables (see `host_vars/ha_pair.yml` for an example) or extra vars.
#
# Usage
# =====
#
# Required variables:
#
#   target: Target HA pair.  See `host_vars/ha_pair.yml` for sample definition of host variables.
#
#   target_version: Target version for upgrade.
#
# See the VARS section of the playbook for additional customization options.
#
# Default run:
#
#  $ ansible-playbook -i inventory upgrade_ha.yml --extra-vars "target=ha_pair target_version=9.0.3-h3"
#
# Notes
# =====
#
# HA pairs with preemption enabled are not supported by this playbook.

- hosts: '{{ target | default("ha_pair") }}'
  connection: local

  vars:
    primary:
      ip_address: '{{ primary_ip_address }}'
      username: '{{ primary_username | default(omit) }}'
      password: '{{ primary_password | default(omit) }}'
      api_key: '{{ primary_api_key | default(omit) }}'

    secondary:
      ip_address: '{{ secondary_ip_address }}'
      username: '{{ secondary_username | default(omit) }}'
      password: '{{ secondary_password | default(omit) }}'
      api_key: '{{ secondary_api_key | default(omit) }}'

    # backup_config - Create a backup of the currently running config before upgrading on both devices.
    backup_config: true

    # backup_filename - Filename for running config backup.
    backup_filename: 'ansible-backup-{{ ansible_date_time.date }}.xml'

    # pause_mid_upgrade - Optionally pause for additional verification during upgrade.  This playbook will perform
    #                     basic checks for HA status and session sync, but this will wait for manual verification before
    #                     upgrading the secondary firewall.
    pause_mid_upgrade: False

  roles:
    - PaloAltoNetworks.paloaltonetworks

  tasks:
    - name: Backup device config (primary)
      panos_op:
        provider: '{{ primary }}'
        cmd: 'save config to {{ backup_filename }}'
      when: backup_config

    - name: Backup device config (secondary)
      panos_op:
        provider: '{{ secondary }}'
        cmd: 'save config to {{ backup_filename }}'
      when: backup_config

    - name: Check for software updates (primary)
      panos_op:
        provider: '{{ primary }}'
        cmd: 'request system software check'

    - name: Check for software updates (secondary)
      panos_op:
        provider: '{{ secondary }}'
        cmd: 'request system software check'

    - name: Download target PAN-OS version
      panos_op:
        provider: '{{ primary }}'
        cmd: |
          <request><system><software><download>
          <sync-to-peer>yes</sync-to-peer>
          <version>{{ target_version }}</version>
          </download></software></system></request>
        cmd_is_xml: true
      register: target_download

    - name: Poll for target PAN-OS version download
      panos_op:
        provider: '{{ primary }}'
        cmd: 'show jobs id {{ (target_download.stdout | from_json).response.result.job }}'
      register: target_download_job
      retries: 10
      delay: 60
      when: target_download is not failed
      until: ( target_download_job.stdout | from_json).response.result.job.result == 'OK'

    - name: Suspend primary device
      panos_op:
        provider: '{{ primary }}'
        cmd: 'request high-availability state suspend'

    - name: Check that secondary is now active
      panos_op:
        provider: '{{ secondary }}'
        cmd: 'show high-availability state'
      register: secondary_active
      retries: 10
      delay: 30
      until: ( secondary_active.stdout | from_json).response.result.group["local-info"].state == 'active' and
             ( secondary_active.stdout | from_json).response.result.group["peer-info"].state == 'suspended' and
             ( secondary_active.stdout | from_json).response.result.group["peer-info"]["state-reason"] == 'User requested' # yamllint disable-line

    - name: Install target PAN-OS version (primary)
      panos_op:
        provider: '{{ primary }}'
        cmd: 'request system software install version {{ target_version }}'
      register: primary_install

    - name: Poll for target PAN-OS version install (primary)
      panos_op:
        provider: '{{ primary }}'
        cmd: 'show jobs id {{ (primary_install.stdout | from_json).response.result.job }}'
      register: primary_install_job
      retries: 10
      delay: 30
      when: primary_install is not failed
      until: ( primary_install_job.stdout | from_json).response.result.job.result == 'OK'

    - name: Reboot primary
      panos_op:
        provider: '{{ primary }}'
        cmd: 'request restart system'

    - pause:
        seconds: 30

    - name: Chassis ready (primary)
      panos_op:
        provider: '{{ primary }}'
        cmd: 'show chassis-ready'
      changed_when: false
      register: result
      until: result is not failed and (result.stdout | from_json).response.result == 'yes'
      retries: 30
      delay: 60

    - name: State sync check (primary)
      panos_op:
        provider: '{{ primary }}'
        cmd: 'show high-availability state'
      register: primary_state_sync
      retries: 10
      delay: 30
      until: ( primary_state_sync.stdout | from_json).response.result.group["local-info"].state == 'passive' and
             ( primary_state_sync.stdout | from_json).response.result.group["local-info"]["state-sync"] == 'Complete'

    - pause:
        prompt: 'Primary upgrade complete.  Pausing for verification.'
      when: pause_mid_upgrade

    - name: Suspend secondary device
      panos_op:
        provider: '{{ secondary }}'
        cmd: 'request high-availability state suspend'

    - name: Check that primary is now active
      panos_op:
        provider: '{{ primary }}'
        cmd: 'show high-availability state'
      register: primary_active
      retries: 10
      delay: 30
      until: ( primary_active.stdout | from_json).response.result.group["local-info"].state == 'active' and
             ( primary_active.stdout | from_json).response.result.group["peer-info"].state == 'suspended' and
             ( primary_active.stdout | from_json).response.result.group["peer-info"]["state-reason"] == 'User requested'


    - name: Install target PAN-OS version (secondary)
      panos_op:
        provider: '{{ secondary }}'
        cmd: 'request system software install version {{ target_version }}'
      register: secondary_install

    - name: Poll for target PAN-OS version install (secondary)
      panos_op:
        provider: '{{ secondary }}'
        cmd: 'show jobs id {{ (secondary_install.stdout | from_json).response.result.job }}'
      register: secondary_install_job
      retries: 10
      delay: 60
      when: secondary_install is not failed
      until: ( secondary_install_job.stdout | from_json).response.result.job.result == 'OK'

    - name: Reboot secondary
      panos_op:
        provider: '{{ secondary }}'
        cmd: 'request restart system'

    - pause:
        seconds: 30

    - name: Chassis ready (secondary)
      panos_op:
        provider: '{{ secondary }}'
        cmd: 'show chassis-ready'
      changed_when: false
      register: result
      until: result is not failed and (result.stdout | from_json).response.result == 'yes'
      retries: 30
      delay: 60

    - name: State sync check (secondary)
      panos_op:
        provider: '{{ secondary }}'
        cmd: 'show high-availability state'
      register: secondary_state_sync
      retries: 10
      delay: 30
      until: ( secondary_state_sync.stdout | from_json).response.result.group["local-info"].state == 'passive' and
             ( secondary_state_sync.stdout | from_json).response.result.group["local-info"]["state-sync"] == 'Complete'
