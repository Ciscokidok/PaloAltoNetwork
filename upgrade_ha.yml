---
# upgrade_ha.yml - PAN-OS HA pair upgrade playbook.
#
# Description
# ===========
#
# Upgrades a PAN-OS HA pair to the specified version.  Can be used for a maintenance relase upgrade
# (from 8.1.2 to 8.1.4), or a major version upgrade with an optional base version download (from 8.1.2, download 9.0.0
# base image, then download and install 9.0.3-h3).
#
# Connection details for both firewalls must be specified in the 'primary' and 'secondary' variables, see 'vars.yml'.
#
# Modules Used
# ============
#
# panos_op - https://ansible-pan.readthedocs.io/en/latest/modules/panos_op_module.html
#
# Usage
# =====
#
# See the VARS section of the playbook for additional customization options.  These variables can be overridden
# using the '--extra-vars' command line switch for `ansible-playbook`.
#
# Default run (maintenance release upgrade):
#
#  $ ansible-playbook -i inventory upgrade_ha.yml --extra-vars "target_version=9.0.3-h3"
#
# Major version upgrade.  Upgrade content, download base image before download and installing target version:
#
#  $ ansible-playbook -i inventory upgrade_ha.yml \
#      --extra-vars "upgrade_content=true download_base_version=true base_version=9.0.0 target_version=9.0.3-h3"
#
# Notes
# =====
#
# HA pairs with preemption enabled are not supported by this playbook.

- hosts: localhost
  connection: local

  vars_files:
    - vars.yml

  vars:
    # backup_config - Create a backup of the currently running config before upgrading on both devices.
    backup_config: true

    # backup_filename - Filename for running config backup.
    backup_filename: 'ansible-backup-{{ ansible_date_time.date }}.xml'

    # upgrade_content - Upgrade content to latest version before starting upgrade.
    upgrade_content: true

    # download_base_version - Optionally download a new base version to both devices.  Useful when performing a PAN-OS
    #                         major version upgrade (i.e. when upgrading from 8.1.2 to 9.0.3-h3, download 9.0.0 before
    #                         installing 9.0.3-h3).
    download_base_version: true

    # base_version - Base version to download when `download_base_version` is set to `true`.
    base_version: '9.0.0'

    # target_version - Target version for upgrade.
    target_version: '9.0.3-h3'

    # pause_mid_upgrade - Optionally pause for additional verification during upgrade.  This playbook will perform
    #                     basic checks for HA status and session sync, but this will wait for manual verification before
    #                     upgrading the secondary firewall.
    pause_mid_upgrade: false

  roles:
    - PaloAltoNetworks.paloaltonetworks

  tasks:
    - name: Backup device config (primary)
      panos_op:
        provider: '{{ primary }}'
        cmd: 'save config to {{ backup_filename }}'
      when: backup_config

    - name: Backup device config (secondary)
      panos_op:
        provider: '{{ secondary }}'
        cmd: 'save config to {{ backup_filename }}'
      when: backup_config

    - name: Download latest content
      panos_op:
        provider: '{{ primary }}'
        cmd: |
          <request><content><upgrade><download>
          <latest></latest>
          <sync-to-peer>yes</sync-to-peer>
          </download></upgrade></content></request>
        cmd_is_xml: true
      register: content_download
      when: upgrade_content

    - name: Poll for content download job completion
      panos_op:
        provider: '{{ primary }}'
        cmd: 'show jobs id {{ (content_download.stdout | from_json).response.result.job }}'
      register: content_download_job
      retries: 5
      delay: 10
      when: upgrade_content and content_download is not failed
      until: ( content_download_job.stdout | from_json ).response.result.job.result == 'OK'

    - name: Install latest content
      panos_op:
        provider: '{{ primary }}'
        cmd: |
          <request><content><upgrade><install>
          <version>latest</version>
          <sync-to-peer>yes</sync-to-peer>
          </install></upgrade></content></request>
        cmd_is_xml: true
      register: content_install
      when: upgrade_content

    - name: Poll for content install job completion
      panos_op:
        provider: '{{ primary }}'
        cmd: 'show jobs id {{ (content_install.stdout | from_json).response.result.job }}'
      register: content_install_job
      retries: 10
      delay: 30
      when: upgrade_content and content_install is not failed
      until: ( content_install_job.stdout | from_json).response.result.job.result == 'OK'

    - name: Check for software updates (primary)
      panos_op:
        provider: '{{ primary }}'
        cmd: 'request system software check'

    - name: Check for software updates (secondary)
      panos_op:
        provider: '{{ secondary }}'
        cmd: 'request system software check'

    - name: Download base PAN-OS version
      panos_op:
        provider: '{{ primary }}'
        cmd: |
          <request><system><software><download>
          <sync-to-peer>yes</sync-to-peer>
          <version>{{ base_version }}</version>
          </download></software></system></request>
        cmd_is_xml: true
      register: base_download
      when: download_base_version

    - name: Poll for base PAN-OS version download
      panos_op:
        provider: '{{ primary }}'
        cmd: 'show jobs id {{ (base_download.stdout | from_json).response.result.job }}'
      register: base_download_job
      retries: 10
      delay: 30
      when: download_base_version and base_download is not failed
      until: ( base_download_job.stdout | from_json).response.result.job.result == 'OK'

    - name: Download target PAN-OS version
      panos_op:
        provider: '{{ primary }}'
        cmd: |
          <request><system><software><download>
          <sync-to-peer>yes</sync-to-peer>
          <version>{{ target_version }}</version>
          </download></software></system></request>
        cmd_is_xml: true
      register: target_download

    - name: Poll for target PAN-OS version download
      panos_op:
        provider: '{{ primary }}'
        cmd: 'show jobs id {{ (target_download.stdout | from_json).response.result.job }}'
      register: target_download_job
      retries: 10
      delay: 30
      when: target_download is not failed
      until: ( target_download_job.stdout | from_json).response.result.job.result == 'OK'

    - name: Suspend primary device
      panos_op:
        provider: '{{ primary }}'
        cmd: 'request high-availability state suspend'

    - name: Check that secondary is now active
      panos_op:
        provider: '{{ secondary }}'
        cmd: 'show high-availability state'
      register: secondary_active
      retries: 10
      delay: 30
      until: ( secondary_active.stdout | from_json).response.result.group["local-info"].state == 'active' and
             ( secondary_active.stdout | from_json).response.result.group["peer-info"].state == 'suspended' and
             ( secondary_active.stdout | from_json).response.result.group["peer-info"]["state-reason"] == 'User requested' # yamllint disable-line

    - name: Install target PAN-OS version (primary)
      panos_op:
        provider: '{{ primary }}'
        cmd: 'request system software install version {{ target_version }}'
      register: primary_install

    - name: Poll for target PAN-OS version install (primary)
      panos_op:
        provider: '{{ primary }}'
        cmd: 'show jobs id {{ (primary_install.stdout | from_json).response.result.job }}'
      register: primary_install_job
      retries: 10
      delay: 30
      when: primary_install is not failed
      until: ( primary_install_job.stdout | from_json).response.result.job.result == 'OK'

    - name: Reboot primary
      panos_op:
        provider: '{{ primary }}'
        cmd: 'request restart system'

    - pause:
        seconds: 30

    - name: Chassis ready (primary)
      panos_op:
        provider: '{{ primary }}'
        cmd: 'show chassis-ready'
      changed_when: false
      register: result
      until: result is not failed and (result.stdout | from_json).response.result == 'yes'
      retries: 50
      delay: 30

    - name: State sync check (primary)
      panos_op:
        provider: '{{ primary }}'
        cmd: 'show high-availability state'
      register: primary_state_sync
      retries: 10
      delay: 30
      until: ( primary_state_sync.stdout | from_json).response.result.group["local-info"].state == 'passive' and
             ( primary_state_sync.stdout | from_json).response.result.group["local-info"]["state-sync"] == 'Complete'

    - pause:
        prompt: 'Primary upgrade complete.  Pausing for verification.'
      when: pause_mid_upgrade

    - name: Suspend secondary device
      panos_op:
        provider: '{{ secondary }}'
        cmd: 'request high-availability state suspend'

    - name: Check that primary is now active
      panos_op:
        provider: '{{ primary }}'
        cmd: 'show high-availability state'
      register: primary_active
      retries: 10
      delay: 30
      until: ( primary_active.stdout | from_json).response.result.group["local-info"].state == 'active' and
             ( primary_active.stdout | from_json).response.result.group["peer-info"].state == 'suspended' and
             ( primary_active.stdout | from_json).response.result.group["peer-info"]["state-reason"] == 'User requested'


    - name: Install target PAN-OS version (secondary)
      panos_op:
        provider: '{{ secondary }}'
        cmd: 'request system software install version {{ target_version }}'
      register: secondary_install

    - name: Poll for target PAN-OS version install (secondary)
      panos_op:
        provider: '{{ secondary }}'
        cmd: 'show jobs id {{ (secondary_install.stdout | from_json).response.result.job }}'
      register: secondary_install_job
      retries: 10
      delay: 30
      when: secondary_install is not failed
      until: ( secondary_install_job.stdout | from_json).response.result.job.result == 'OK'

    - name: Reboot secondary
      panos_op:
        provider: '{{ secondary }}'
        cmd: 'request restart system'

    - pause:
        seconds: 30

    - name: Chassis ready (secondary)
      panos_op:
        provider: '{{ secondary }}'
        cmd: 'show chassis-ready'
      changed_when: false
      register: result
      until: result is not failed and (result.stdout | from_json).response.result == 'yes'
      retries: 50
      delay: 30

    - name: State sync check (secondary)
      panos_op:
        provider: '{{ secondary }}'
        cmd: 'show high-availability state'
      register: secondary_state_sync
      retries: 10
      delay: 30
      until: ( secondary_state_sync.stdout | from_json).response.result.group["local-info"].state == 'passive' and
             ( secondary_state_sync.stdout | from_json).response.result.group["local-info"]["state-sync"] == 'Complete'
